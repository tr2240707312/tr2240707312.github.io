<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>wsl子系统重装</title>
    <link href="/2025/09/08/wsl%E9%87%8D%E8%A3%85/"/>
    <url>/2025/09/08/wsl%E9%87%8D%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># 卸载wsl子系统</span><br>wsl <span class="hljs-literal">--unregister</span> Ubuntu<span class="hljs-literal">-24</span>.<span class="hljs-number">04</span><br><br><span class="hljs-comment">#从tar包导入子系统</span><br>wsl <span class="hljs-literal">--import</span> Ubuntu<span class="hljs-literal">-24</span>.<span class="hljs-number">04</span> D:\linux\Ubuntu<span class="hljs-literal">-24</span>.<span class="hljs-number">04</span> D:\linux\Ubuntu<span class="hljs-literal">-24</span>.<span class="hljs-number">04</span>.tar<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>work</category>
      
      <category>子系统重装</category>
      
    </categories>
    
    
    <tags>
      
      <tag>子系统重装</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>服务器离线环境部署指南</title>
    <link href="/2025/07/31/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%A6%BB%E7%BA%BF%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2%E6%8C%87%E5%8D%97/"/>
    <url>/2025/07/31/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%A6%BB%E7%BA%BF%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2%E6%8C%87%E5%8D%97/</url>
    
    <content type="html"><![CDATA[<h1 id="1-VSCode插件离线安装"><a href="#1-VSCode插件离线安装" class="headerlink" title="1. VSCode插件离线安装"></a>1. VSCode插件离线安装</h1><blockquote><p>VSCode下载地址：<a href="https://code.visualstudio.com/download">https://code.visualstudio.com/download</a></p></blockquote><p>插件安装包下载地址：<a href="https://marketplace.visualstudio.com/">https://marketplace.visualstudio.com/</a></p><blockquote><p>若该地址下载的插件安装包无法正确安装，可以来到插件对应的GitHub地址进行下载后缀为.vsix的安装包，例子如下：</p></blockquote><img src="/img/server/1.png" alt="image-20250723181704821" style="zoom:50%;" /><img src="/img/server/2.png" alt="image-20250723181736397" style="zoom:67%;" /><img src="/img/server/3.png" alt="image-20250723181757154" style="zoom:50%;" /><p>下载完安装包后，通过XFTP将文件传输至于服务器，接着直接安装即可</p><img src="/img/server/4.png" alt="image-20250723181904627" style="zoom:67%;" /><h1 id="2-局域网环境VSCode远程连接服务器"><a href="#2-局域网环境VSCode远程连接服务器" class="headerlink" title="2. 局域网环境VSCode远程连接服务器"></a>2. 局域网环境VSCode远程连接服务器</h1><h2 id="2-1-SSH服务安装"><a href="#2-1-SSH服务安装" class="headerlink" title="2.1 SSH服务安装"></a>2.1 SSH服务安装</h2><blockquote><p>如果安装的是Ubuntu24.xx版本，系统设置内已自带SSH监听服务，只需要在设置界面打开即可</p></blockquote><img src="/img/server/5.png" alt="image-20250809205018125" style="zoom: 33%;" /><ol><li><p>下载SSH服务所需的安装包（与系统版本对应）</p><blockquote><p>一个比较方便的方法是在Windows商店下载对应的Ubuntu系统，利用本地的网络环境执行如下命令</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 下载openssh-server及其依赖项</span><br><span class="hljs-built_in">sudo</span> apt-get install --download-only --reinstall -o Dir::Cache::archives=/mnt/d/apt_pkgs openssh-server -y<br></code></pre></td></tr></table></figure></li><li><p>上传后执行安装命令</p><blockquote><p>Ubuntu系统安装该服务后续开机会自启动</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 安装目标路径下的所有.deb后缀安装包</span><br>dpkg -i /目标路径/*.deb<br><span class="hljs-comment"># 防火墙允许22号端口通过</span><br>ufw allow 22<br><span class="hljs-comment"># 启动SSH服务</span><br>systemctl start ssh<br></code></pre></td></tr></table></figure></li></ol><h2 id="2-2-vscode本地服务器安装"><a href="#2-2-vscode本地服务器安装" class="headerlink" title="2.2 vscode本地服务器安装"></a>2.2 vscode本地服务器安装</h2><blockquote><p>当VSCode开启SSH服务时，会在目标主机安装VScode本地服务器，作用是映射本地与远程的路径信息以及同步编辑行为等。在离线环境下，相关资源无法从互联网获取，因此需要手动进行干预</p></blockquote><ol><li><p>按照如下👇方式查看自己VSCode的commit信息并保存</p><blockquote><p>可以理解为建立连接时的id信息</p></blockquote><img src="/img/server/6.png" alt="image-20250728102318409" style="zoom: 33%;" /><img src="/img/server/7.png" alt="image-20250728102419828" style="zoom: 50%;" /></li><li><p>浏览器分别输入以下网址，进行文件下载并创建相应文件夹</p><blockquote><p><strong>commit必须进行对应替换，否则最后连接后会出现无法读取远程目录的情况！！！</strong></p></blockquote><ul><li><strong>vscode-server-linux-x64.tar</strong>：<code>https://update.code.visualstudio.com/commit:替换为自己的commit号/server-linux-x64/stable</code></li><li><strong>vscode_cli_alpine_x64_cli.tar.gz</strong>：<code>https://update.code.visualstudio.com/commit:替换为自己的commit号/cli-alpine-x64/stable</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 在用户目录下创建.vscode-server/cli/servers三个文件夹</span><br><span class="hljs-built_in">mkdir</span> -p ~/.vscode-server/cli/servers<br><span class="hljs-comment"># 在servers文件夹下再创建Stable-&#123;commit_id&#125;文件夹</span><br><span class="hljs-built_in">mkdir</span> Stable-&#123;commit_id&#125;<br></code></pre></td></tr></table></figure><p>目录层级如下所示</p><img src="/img/server/8.png" alt="image-20250728104413292" style="zoom:50%;" /></li><li><p>解压文件至指定目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 将vscode-server-linux-x64.tar压缩包解压至刚刚创建的路径，commit_id进行相应替换</span><br><span class="hljs-comment"># 解压后的文件夹需要重命名为server</span><br>tar -zxvf /目标路径/vscode-server-linux-x64.tar.gz -C ~/.vscode-server/cli/servers/Stable-&#123;commit_id&#125;<br><span class="hljs-comment"># 将vscode_cli_alpine_x64_cli.tar.gz压缩包（仅有code文件）解压到.vscode-server下</span><br>tar -zxvf /目标路径/vscode_cli_alpine_x64_cli.tar.gz -C ~/.vscode-server<br><span class="hljs-comment"># 将文件命名为&quot;code-&#123;commit_id&#125;&quot;，如下👇</span><br></code></pre></td></tr></table></figure><img src="/img/server/9.png" alt="image-20250728105124921" style="zoom:50%;" /><p>由此即可完成vscode本地服务器配置</p></li></ol><p>若后续有新的主机需要连接服务器，只需要在对应位置创建新的<code>Stable-&#123;commit_id&#125;</code>文件夹并解压<code>vscode-server-linux-x64.tar</code>压缩包以及解压<code>vscode_cli_alpine_x64_cli.tar.gz</code>，将其重命名为<code>code-&#123;commit_id&#125;</code>并将其移动到对应目录位置即可</p><h1 id="3-离线部署conda虚拟环境"><a href="#3-离线部署conda虚拟环境" class="headerlink" title="3. 离线部署conda虚拟环境"></a>3. 离线部署conda虚拟环境</h1><p>如果需要在服务器离线部署Python虚拟环境（服务器要提前安装MiniConda），可参考以下步骤：</p><blockquote><p>Miniconda下载地址：<a href="https://repo.anaconda.com/miniconda/">https://repo.anaconda.com/miniconda/</a></p><p>pip 通过 -e 参数进行安装但是后续修改了项目位置，可以在envs&#x2F;虚拟环境名称&#x2F;lib&#x2F;当前环境<code>python版本/site-packages/__editablexxx.py</code>进行修改</p></blockquote><ol><li><p>寻找拥有MiniConda且联网的Linux系统，创建初始环境并指定python版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 创建指定python版本且名为env_name的虚拟环境，安装conda-pack工具</span><br>conda create --name env_name python=xxx conda-pack工具<br></code></pre></td></tr></table></figure><p>将当前基础环境进行打包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 打包env_name这个虚拟环境，只需将其解压至conda对应的envs目录下即可完成迁移</span><br><span class="hljs-comment"># 注意：打包的系统需要与虚拟环境的系统一致，否则环境无法兼容</span><br>conda pack -n env_name -o env_name.tar.gz<br></code></pre></td></tr></table></figure><p>利用XFtp或其他的文件传输工具将工具传输至于离线服务器的<code>minicoda/envs</code>目录下，将当前环境进行解压到指定目录即可完成基础环境的迁移</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 在minicoda/envs路径下创建env_name文件夹</span><br><span class="hljs-built_in">mkdir</span> -p env_name<br><span class="hljs-comment"># 解压虚拟环境</span><br>tar -zxvf env_name.tar.gz -C env_name<br></code></pre></td></tr></table></figure><blockquote><p>可在离线服务器中存放一个仅有python的库作为环境源，后续若是需要类似的python虚拟环境只需要复制<code>minicoda/envs</code>下的环境源文件夹即可</p></blockquote></li><li><p>在自己的Windows电脑上安装相关依赖</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 安装Linux平台与python3.10匹配的requirements.txt涉及的二进制包(.whl)到当前的offline文件夹中</span><br>pip download -r requirements.txt -d ./offline/ --platform manylinux2014_x86_64 --python-version <span class="hljs-number">3.10</span>  --only-binary=:<span class="hljs-built_in">all</span>:<br><br><span class="hljs-comment"># 若只想单独安装某第三方库，则使用如下命令</span><br><span class="hljs-comment"># 安装Linux平台与python3.10匹配的的pandas及其相关依赖的二进制包(.whl)到当前的offline文件夹中</span><br>pip download pandas -d ./offline/ --platform manylinux2014_x86_64 --python-version <span class="hljs-number">3.10</span>  --only-binary=:<span class="hljs-built_in">all</span>:   <br></code></pre></td></tr></table></figure><p>将offline文件夹压缩传送至离线服务器</p></li><li><p>离线服务器安装依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 切换至目标虚拟环境</span><br>conda activate env_name<br><span class="hljs-comment"># 根据当前的依赖生成requirements.txt文件</span><br><span class="hljs-built_in">ls</span> ./offline/*.whl &gt; requirements.txt<br><span class="hljs-comment"># 安装所有依赖</span><br>pip install -r requirements.txt<br></code></pre></td></tr></table></figure></li></ol><h1 id="4-Linux常用命令"><a href="#4-Linux常用命令" class="headerlink" title="4.Linux常用命令"></a>4.Linux常用命令</h1><h2 id="4-1-下载安装"><a href="#4-1-下载安装" class="headerlink" title="4.1 下载安装"></a>4.1 下载安装</h2><p><strong>apt软件包</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt update<br><span class="hljs-comment"># 确保本地系统环境足够干净，否则依赖下载不全</span><br><span class="hljs-comment"># 下载软件包到指定目录</span><br><span class="hljs-built_in">sudo</span> apt-get install --download-only --reinstall  -o Dir::Cache::archives=存储地址 包名 -y<br><br><span class="hljs-comment"># 安装软件对应的所有.deb</span><br><span class="hljs-built_in">sudo</span> dpkg -i ./*deb<br></code></pre></td></tr></table></figure><blockquote><p>由于deb安装并不会判断依赖关系，因此初次安装有些依赖可能装不上，只需要再次执行即可</p></blockquote><p><strong>conda环境</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 将本地的虚拟环境打包（直接解压至miniconda的envs的空目录下就可以使用）</span><br>conda pack -n your_env_name -o your_env_name.tar.gz<br></code></pre></td></tr></table></figure><h2 id="4-2-防火墙"><a href="#4-2-防火墙" class="headerlink" title="4.2 防火墙"></a>4.2 防火墙</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看防火墙当前存在的规则</span><br><span class="hljs-built_in">sudo</span> ufw status numbered<br><span class="hljs-comment"># 开放xx端口</span><br><span class="hljs-built_in">sudo</span> ufw allow xx<br><span class="hljs-comment"># xx端口禁止通行</span><br><span class="hljs-built_in">sudo</span> ufw deny xx<br><span class="hljs-comment"># 删除某条规则[最左侧的序号]</span><br><span class="hljs-built_in">sudo</span> ufw delete xx<br><span class="hljs-comment"># 重启防火墙</span><br><span class="hljs-built_in">sudo</span> ufw reload<br><span class="hljs-comment"># 禁用/启用防火墙</span><br><span class="hljs-built_in">sudo</span> ufw <span class="hljs-built_in">disable</span>/enable <br></code></pre></td></tr></table></figure><h2 id="4-3-权限"><a href="#4-3-权限" class="headerlink" title="4.3 权限"></a>4.3 权限</h2><blockquote><p>通过 <code>chmod</code> 指令，可以修改<strong>文件或目录</strong>的权限</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">u：文件所有者g：文件的组o：其他人a：所有用户【u,g,o的总和】<br></code></pre></td></tr></table></figure><ul><li><p>方式一：字母加符号👉+，-，&#x3D; 变更权限</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 给文件所有者赋予rwx权限，所有组赋予rx权限，其他人赋予x权限</span><br>chmod u=rwx,g=rx,o=x 文件/目录名<br><span class="hljs-comment"># 给其他人增加此文件的w权限</span><br>chmod o+w 文件/目录名<br><span class="hljs-comment"># 删除所有人对此文件的x权限【可执行权限】</span><br>chmod a-x 文件/目录名<br></code></pre></td></tr></table></figure></li><li><p>方式二：数字加符号👉+，-，&#x3D; 变更权限</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 二进制数，0-7能囊括所有权限组合【0是无权限】</span><br>r=<span class="hljs-number">4</span>w=<span class="hljs-number">2</span>x=<span class="hljs-number">1</span><br><span class="hljs-comment"># 给文件所有者赋予rwx权限(7)，所有组赋予rx权限(5)，其他人赋予x权限(1)</span><br>chmod <span class="hljs-number">751</span> 文件/目录名<br></code></pre></td></tr></table></figure></li></ul><h2 id="4-4-服务管理"><a href="#4-4-服务管理" class="headerlink" title="4.4 服务管理"></a>4.4 服务管理</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 设置服务开机启动/关闭服务开机启动</span><br>systemctl <span class="hljs-built_in">enable</span>/disable 服务名<br><span class="hljs-comment"># 查询某个服务是否是自启动的</span><br>systemctl is-enabled 服务名<br><span class="hljs-comment"># 查看服务当前状态[start,stop,restart]</span><br>systemctl status 服务器<br></code></pre></td></tr></table></figure><h2 id="4-5-文件"><a href="#4-5-文件" class="headerlink" title="4.5 文件"></a>4.5 文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 递归复制</span><br><span class="hljs-built_in">cp</span> -r <span class="hljs-built_in">source</span> dest<br><span class="hljs-comment"># 创建多级文件夹</span><br><span class="hljs-built_in">mkdir</span> -p xxx<br></code></pre></td></tr></table></figure><h2 id="4-6-磁盘"><a href="#4-6-磁盘" class="headerlink" title="4.6 磁盘"></a>4.6 磁盘</h2><p><strong>永久挂载外接硬盘</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看所有存储设备及分区，定位到需要挂载的设备并记住UUID与文件系统类型</span><br>lsblk -f<br><br><span class="hljs-comment"># 将存储设备sda3挂载到/mnt/storage4T【文件系统为ext4是设备】</span><br><span class="hljs-built_in">sudo</span> vim /etc/fstab<br><span class="hljs-comment">########</span><br><span class="hljs-comment"># 在文件尾部添加如下内容，并保存退出</span><br>UUID=xxx /mnt/storage4T ext4 defaults 0 2<br><span class="hljs-comment">#UUID=你的UUID 挂载位置 文件系统类型 defaults 0 2</span><br><span class="hljs-comment">########</span><br><span class="hljs-comment"># 配置生效</span><br><span class="hljs-built_in">sudo</span> mount -a<br>systemctl daemon-reload<br><span class="hljs-comment"># 查看是否挂载成功，接着重启验证</span><br><span class="hljs-built_in">df</span> -h  <br></code></pre></td></tr></table></figure><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 关机</span><br>init 0<br><span class="hljs-comment"># 查看80端口占用情况</span><br>lsof -i :80<br><span class="hljs-comment"># 查询系统架构</span><br><span class="hljs-built_in">uname</span> -m<br></code></pre></td></tr></table></figure><h1 id="5-显卡工具及驱动安装"><a href="#5-显卡工具及驱动安装" class="headerlink" title="5. 显卡工具及驱动安装"></a>5. 显卡工具及驱动安装</h1><blockquote><p>若要在算法中使用Nvidia显卡，驱动以及CUDA工具必不可少</p></blockquote><p>使用Nvidia官方的CUDA Toolkit进行安装时可以顺带安装对应的驱动，因此无需提前安装驱动</p><blockquote><p>直接搜索CUDA Toolkit对应版本进入官网选配即可，通常12.8比较是主流的版本</p></blockquote><img src="/img/server/10.png" alt="image-20250806151524557" style="zoom: 50%;" /><img src="/img/server/11.png" alt="image-20250806152023220" style="zoom:50%;" /><p>👆选配后往下滑，可看见对应的下载地址👇</p><img src="/img/server/12.png" alt="image-20250806152222010" style="zoom:50%;" /><p>安装前需要确保服务器拥有gcc，g++，make，binutils软件包（使用apt下载），先安装gcc再安装g++，顺序错了会导致gcc某些包安装失败，此时需要手动软链接cc工具</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 手动创建cc到gcc的软链接【确保gcc已安装】</span><br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">ln</span> -s /usr/bin/gcc /usr/bin/cc<br><span class="hljs-comment"># 先安装gcc能查询到说明安装</span><br>cc --version<br></code></pre></td></tr></table></figure><p>赋予安装包执行权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 到指定目录下执行，赋予执行权限</span><br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">chmod</span> +x ./cuda_12.8.0_570.86.10_linux.run<br><span class="hljs-comment"># 关闭图形化界面【显卡驱动安装必须关闭图形化界面】</span><br><span class="hljs-comment"># 该命令黑屏时按快捷键Ctrl+Alt+F2~F6切换至于其他文本终端</span><br><span class="hljs-built_in">sudo</span> systemctl isolate multi-user.target<br><span class="hljs-comment"># 执行安装包</span><br><span class="hljs-built_in">sudo</span> ./cuda_12.8.0_570.86.10_linux.run<br></code></pre></td></tr></table></figure><p>安装过程依照系统提示即可，其中X代表选择，空白代表没选中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 配置环境变量</span><br>vim ~/.bashrc<br><span class="hljs-comment">##############</span><br><span class="hljs-comment"># 在~/.bashrc末尾添加如下内容</span><br><span class="hljs-built_in">export</span> PATH=/usr/local/cuda-12.8/bin:<span class="hljs-variable">$PATH</span><br><span class="hljs-built_in">export</span> LD_LIBRARY_PATH=/usr/local/cuda-12.8/lib64:<span class="hljs-variable">$LD_LIBRARY_PATH</span><br><span class="hljs-comment">############</span><br><span class="hljs-comment"># 刷新环境变量</span><br><span class="hljs-built_in">source</span> ~/.bashrc<br><span class="hljs-comment"># 若有对应版本输出则安装成功</span><br>nvidia-smi<br>nvcc --version<br><span class="hljs-comment"># 切换为图形模式</span><br><span class="hljs-built_in">sudo</span> systemctl isolate graphical.target<br></code></pre></td></tr></table></figure><h1 id="6-Ubuntu系统重装"><a href="#6-Ubuntu系统重装" class="headerlink" title="6. Ubuntu系统重装"></a>6. Ubuntu系统重装</h1><blockquote><p>准备好一个16GB以上的空U盘！若系统卡死，则同时按住Ctrl + Alt，接着依次按PriSc，R，E，I，S，U，B即可完成安全重启</p></blockquote><ol><li><p>在清华镜像源下载所需版本的系统资源（<a href="https://mirrors.tuna.tsinghua.edu.cn/ubuntu-releases/">Ubuntu</a>），选择<code>desktop-amd64.iso</code>结尾的文件下载</p></li><li><p>下载系统启动盘构造工具<a href="https://filehippo.com/download_ultra-iso/post_download/?dt=internalDownload">UltraISO</a>，双击安装，选择默认选项即可，安装完成启动后，选择“继续试用”</p><img src="/img/server/13.png" alt="image-20250805090644910" style="zoom:33%;" /></li><li><p>点击“文件”–&gt;“打开”，选择自己的在第1步下载的ISO系统镜像路径，接着点击“启动”–&gt;”写入硬盘映像”</p><img src="/img/server/14.png" alt="image-20250805092442965" style="zoom:33%;" /></li><li><p>选择本地空U盘路径，点击“格式化”，再点击“写入”</p><img src="/img/server/15.png" alt="image-20250805093307182" style="zoom: 33%;" /></li><li><p>将U盘插入主机，开机过程中来回按F12，直至进入BIOS系统，选择使用U盘启动</p></li><li><p>接着按照系统指引进行初始化即可</p></li></ol><p>当电脑内置Nvidia显卡且安装过程中未勾选安装初始Nvidia驱动时（推荐勾选，后续安装），开机后可能出现卡在Logo页面的情况，此时需要如下操作才能进入系统页面</p><ol><li><p>同时按住Ctrl + Alt，接着依次按PriSc，R，E，I，S，U，B完成安全重启</p></li><li><p>重启过程中选择“Ubuntu 高级选项”–&gt;”recovery mode”，加载完毕后选择”root”选项进入，在命令行输入如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> vi /etc/default/grub<br><span class="hljs-comment"># 按i进入编辑模式，将GRUB_CMDLINE_LINUX_DEFAULT修改为如下内容后保存退出</span><br>GRUB_CMDLINE_LINUX_DEFAULT=<span class="hljs-string">&quot;quiet splash nomodeset&quot;</span><br><span class="hljs-built_in">sudo</span> update-grub<br>reboot<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>work</category>
      
      <category>环境部署</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux环境离线部署</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Word文档自动化基础</title>
    <link href="/2025/07/13/Word%E6%96%87%E6%A1%A3%E8%87%AA%E5%8A%A8%E5%8C%96%E5%9F%BA%E7%A1%80/"/>
    <url>/2025/07/13/Word%E6%96%87%E6%A1%A3%E8%87%AA%E5%8A%A8%E5%8C%96%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="1-基本介绍"><a href="#1-基本介绍" class="headerlink" title="1. 基本介绍"></a>1. 基本介绍</h1><blockquote><p><code>python-docx</code>是用于创建和修改 Microsoft Word（.docx）文件的 Python 第三方库。通过它，你能够以编程方式生成 Word 文档，添加文本、表格、图像、样式等元素</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> docx <span class="hljs-keyword">import</span> Document<br><span class="hljs-comment"># 我们通过这一方法创建文档对象，后续操作皆以该对象为出发点</span><br>doc = Document()<br><span class="hljs-comment"># 此时是读取path路径现有的文档对象</span><br>doc = Document(path)<br><span class="hljs-comment"># 保存文档</span><br>doc.save(path)<br></code></pre></td></tr></table></figure><p>word中常见的操作：添加标题（add_heading），添加正文（add_paragraph），添加表格（add_table）</p><h1 id="2-文本块Run"><a href="#2-文本块Run" class="headerlink" title="2. 文本块Run"></a>2. 文本块Run</h1><p>文本块Run对象是通过add_run()返回的对象，如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">head = doc.add_heading()<br><span class="hljs-comment"># 得到run对象，paragraph同理</span><br>run = head.add_run()<br><br><span class="hljs-comment"># 表格的run对象以单元格为单位</span><br>table = doc.add_table(rows=<span class="hljs-number">2</span>, cols=<span class="hljs-number">2</span>,style=<span class="hljs-string">&#x27;Table Grid&#x27;</span>)<br><span class="hljs-comment"># 访问第一行第一列单元格的第一个段落的第一个 Run</span><br>cell = table.cell(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>)<br><span class="hljs-comment"># 得到单元格内容首段的run对象</span><br>run = cell.paragraphs[<span class="hljs-number">0</span>].add_run()<br></code></pre></td></tr></table></figure><p>通过Run对象，我们可以对文本进行多种定制化操作，例如字体样式，字体大小&#x2F;颜色，对齐方式等等，每使用一次add_run()就在原先模块的基础上追加了新的文本</p><h2 id="字体样式"><a href="#字体样式" class="headerlink" title="字体样式"></a>字体样式</h2><blockquote><p>确保文本是<code>add_run</code>添加的</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> docx.oxml.ns <span class="hljs-keyword">import</span> qn<br><span class="hljs-comment"># 英文字体设置</span><br>run.font.name = <span class="hljs-string">&#x27;黑体&#x27;</span><br><span class="hljs-comment"># 中文字体设置</span><br>run._element.rPr.rFonts.<span class="hljs-built_in">set</span>(qn(<span class="hljs-string">&#x27;w:eastAsia&#x27;</span>), <span class="hljs-string">&#x27;微软雅黑&#x27;</span>) <br></code></pre></td></tr></table></figure><h2 id="字体大小"><a href="#字体大小" class="headerlink" title="字体大小"></a>字体大小</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> docx.shared <span class="hljs-keyword">import</span> Pt<br><span class="hljs-comment"># 12磅字体</span><br>run.font.size = Pt(<span class="hljs-number">12</span>)  <br></code></pre></td></tr></table></figure><h2 id="字体颜色"><a href="#字体颜色" class="headerlink" title="字体颜色"></a>字体颜色</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> docx.shared <span class="hljs-keyword">import</span> RGBColor<br><span class="hljs-comment"># 红色</span><br>run.font.color.rgb = RGBColor(<span class="hljs-number">255</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>)  <br></code></pre></td></tr></table></figure><h2 id="粗体、斜体、下划线"><a href="#粗体、斜体、下划线" class="headerlink" title="粗体、斜体、下划线"></a>粗体、斜体、下划线</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 粗体</span><br>run.bold = <span class="hljs-literal">True</span>     <br><span class="hljs-comment"># 斜体</span><br>run.italic = <span class="hljs-literal">True</span>     <br><span class="hljs-comment"># 下划线</span><br>run.underline = <span class="hljs-literal">True</span>   <br></code></pre></td></tr></table></figure><h1 id="2-标题相关操作"><a href="#2-标题相关操作" class="headerlink" title="2. 标题相关操作"></a>2. 标题相关操作</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 添加标题，默认为一级标题，text推荐在run中添加，这样可以自定义样式</span><br>heading = doc.add_heading(text,level=<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p><strong>标题对齐</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> docx.enum.text <span class="hljs-keyword">import</span> WD_ALIGN_PARAGRAPH<br><span class="hljs-comment"># 居中对齐</span><br>heading.alignment = WD_ALIGN_PARAGRAPH.CENTER  <br></code></pre></td></tr></table></figure><p><strong>标题前后间距</strong></p><blockquote><p>借助段落相关API实现</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 段前间距12磅</span><br>heading.paragraph_format.space_before = Pt(<span class="hljs-number">12</span>)  <br><span class="hljs-comment"># 段后间距6磅</span><br>heading.paragraph_format.space_after = Pt(<span class="hljs-number">6</span>)   <br></code></pre></td></tr></table></figure><h1 id="3-段落相关操作"><a href="#3-段落相关操作" class="headerlink" title="3. 段落相关操作"></a>3. 段落相关操作</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 创建空段落，后续通过run添加内容</span><br>p = doc.add_paragraph()<br></code></pre></td></tr></table></figure><h2 id="段落对齐方式"><a href="#段落对齐方式" class="headerlink" title="段落对齐方式"></a>段落对齐方式</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 设置段落对齐方式，JUSTIFY是两端对齐</span><br><span class="hljs-keyword">from</span> docx.enum.text <span class="hljs-keyword">import</span> WD_ALIGN_PARAGRAPH<br>p.alignment = WD_ALIGN_PARAGRAPH.CENTER  <span class="hljs-comment"># 居中对齐</span><br></code></pre></td></tr></table></figure><h2 id="缩进设置"><a href="#缩进设置" class="headerlink" title="缩进设置"></a>缩进设置</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> docx.shared <span class="hljs-keyword">import</span> Cm<br><span class="hljs-comment"># 左缩进1厘米</span><br>p.paragraph_format.left_indent = Cm(<span class="hljs-number">1.0</span>)  <br><span class="hljs-comment"># 首行缩进0.5厘米【负数为悬挂缩进】</span><br>p.paragraph_format.first_line_indent = Cm(<span class="hljs-number">0.5</span>)  <br></code></pre></td></tr></table></figure><h2 id="间距"><a href="#间距" class="headerlink" title="间距"></a>间距</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 1.5倍行距</span><br>p.paragraph_format.line_spacing_rule = WD_LINE_SPACING.ONE_POINT_FIVE <br><span class="hljs-comment"># 设置固定行距为21磅</span><br>p.line_spacing_rule = WD_LINE_SPACING.EXACTLY <br>p.paragraph_format.line_spacing = Pt(<span class="hljs-number">21</span>)<br><span class="hljs-comment"># 首行缩进（两个中文字符大约42磅）</span><br>p.paragraph_format.first_line_indent = Pt(<span class="hljs-number">42</span>)<br><span class="hljs-comment"># 段前间距6磅</span><br>p.paragraph_format.space_before = Pt(<span class="hljs-number">6</span>)  <br><span class="hljs-comment"># 段后间距6磅</span><br>p.paragraph_format.space_after = Pt(<span class="hljs-number">6</span>)   <br></code></pre></td></tr></table></figure><h2 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 段落前分页</span><br>p.paragraph_format.page_break_before = <span class="hljs-literal">True</span>  <br></code></pre></td></tr></table></figure><h1 id="4-表格相关操作"><a href="#4-表格相关操作" class="headerlink" title="4. 表格相关操作"></a>4. 表格相关操作</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 3行3列带网格的表格</span><br>table = doc.add_table(rows=<span class="hljs-number">3</span>, cols=<span class="hljs-number">3</span>, style=<span class="hljs-string">&#x27;Table Grid&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="表格尺寸"><a href="#表格尺寸" class="headerlink" title="表格尺寸"></a>表格尺寸</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 行数</span><br>rows_count = <span class="hljs-built_in">len</span>(table.rows)  <br><span class="hljs-comment"># 列数</span><br>cols_count = <span class="hljs-built_in">len</span>(table.columns)  <br></code></pre></td></tr></table></figure><h2 id="添加新行"><a href="#添加新行" class="headerlink" title="添加新行"></a>添加新行</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 表格底部添加新行</span><br>new_row = table.add_row().cells<br></code></pre></td></tr></table></figure><h2 id="访问单元格cell"><a href="#访问单元格cell" class="headerlink" title="访问单元格cell"></a>访问单元格cell</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 第1行第2列的单元格</span><br>cell = table.cell(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>)  <br><span class="hljs-comment"># 第2列第1行的单元格（可通过迭代访问所有单元格）</span><br>cell = table.columns[<span class="hljs-number">1</span>].cells[<span class="hljs-number">0</span>] <br><span class="hljs-comment"># 第1行第2列的单元格（可通过迭代访问所有单元格）</span><br>cell = table.rows[<span class="hljs-number">0</span>].cells[<span class="hljs-number">1</span>]<br></code></pre></td></tr></table></figure><h2 id="合并单元格"><a href="#合并单元格" class="headerlink" title="合并单元格"></a>合并单元格</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 合并第1行的前两列</span><br>table.cell(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>).merge(table.cell(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>))<br><span class="hljs-comment"># 合并多行多列（2x2区域）</span><br>table.cell(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>).merge(table.cell(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>))  <br></code></pre></td></tr></table></figure><h2 id="单元格对齐"><a href="#单元格对齐" class="headerlink" title="单元格对齐"></a>单元格对齐</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> docx.enum.text <span class="hljs-keyword">import</span> WD_ALIGN_PARAGRAPH, WD_ALIGN_VERTICAL<br><span class="hljs-comment"># 水平对齐（左、中、右）</span><br>cell.paragraphs[<span class="hljs-number">0</span>].alignment = WD_ALIGN_PARAGRAPH.CENTER <br><span class="hljs-comment"># 垂直对齐（上、中、下）</span><br>cell.vertical_alignment = WD_ALIGN_VERTICAL.CENTER  <br></code></pre></td></tr></table></figure><h2 id="宽度与高度"><a href="#宽度与高度" class="headerlink" title="宽度与高度"></a>宽度与高度</h2><blockquote><p>高度通常是按行为单位</p></blockquote><p><strong>宽度</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 表格总宽度15厘米</span><br>table.width = Cm(<span class="hljs-number">15</span>)  <br><span class="hljs-comment"># 第1列宽度为3厘米</span><br>table.columns[<span class="hljs-number">0</span>].width = Cm(<span class="hljs-number">3</span>)  <br><span class="hljs-comment"># 第1个单元格宽度为5厘米</span><br>table.cell(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>).width = Cm(<span class="hljs-number">5</span>)  <br></code></pre></td></tr></table></figure><p><strong>高度</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> docx.enum.text <span class="hljs-keyword">import</span> WD_ROW_HEIGHT_RULE<br><span class="hljs-comment"># 设置第1行为固定高度（即使内容不足也保持此高度）</span><br>table.rows[<span class="hljs-number">0</span>].height_rule = WD_ROW_HEIGHT_RULE.EXACTLY<br>table.rows[<span class="hljs-number">0</span>].height = Cm(<span class="hljs-number">1</span>)<br><span class="hljs-comment"># 清除固定高度设置</span><br>table.rows[<span class="hljs-number">0</span>].height = <span class="hljs-literal">None</span> <br><span class="hljs-comment"># 设置第1行自动适应内容高度</span><br>table.rows[<span class="hljs-number">0</span>].height_rule = WD_ROW_HEIGHT_RULE.AUTO<br></code></pre></td></tr></table></figure><h2 id="单元格内容"><a href="#单元格内容" class="headerlink" title="单元格内容"></a>单元格内容</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 直接设置（会覆盖原有内容及格式）</span><br>cell.text = <span class="hljs-string">&#x27;新内容&#x27;</span>  <br><br><span class="hljs-comment"># 获取单元格内第一个段落并修改文本内容</span><br>cell.paragraphs[<span class="hljs-number">0</span>].text = <span class="hljs-string">&quot;保留格式的文本&quot;</span> <br><br><span class="hljs-comment"># 使用run定位到更加精准的位置</span><br>cell.paragraphs[<span class="hljs-number">0</span>].runs[<span class="hljs-number">0</span>].text = <span class="hljs-string">&quot;第一个段落的第一个run&quot;</span><br></code></pre></td></tr></table></figure><h1 id="5-图片相关操作"><a href="#5-图片相关操作" class="headerlink" title="5. 图片相关操作"></a>5. 图片相关操作</h1><blockquote><p>通过段落加Run的方式添加图片，图片大小需要在添加时指定</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 单元格通过段落对象获得run</span><br>run = cell.paragraphs[<span class="hljs-number">0</span>].add_run()<br><span class="hljs-comment"># 利用run添加图片并固定宽度（高度自适应，也可以填固定值）</span><br>run.add_picture(<span class="hljs-string">&quot;./test/1.jpg&quot;</span>, width=Cm(<span class="hljs-number">6.4</span>))<br><span class="hljs-comment"># 设置图片居中</span><br>cell.paragraphs[<span class="hljs-number">0</span>].alignment = WD_ALIGN_PARAGRAPH.CENTER<br></code></pre></td></tr></table></figure><h1 id="6-节Section"><a href="#6-节Section" class="headerlink" title="6 节Section"></a>6 节Section</h1><blockquote><p>每个Word文档至少有一个节。如果文档没有手动分节，整个文档就是一个节，通过插入分节符（如 “下一页”、“连续”、“偶数页” 等），可以将文档分成多个节，各节可以有独立的页面设置。</p></blockquote><h2 id="页面设置相关属性"><a href="#页面设置相关属性" class="headerlink" title="页面设置相关属性"></a>页面设置相关属性</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> docx.enum.section <span class="hljs-keyword">import</span> WD_ORIENT<br><span class="hljs-keyword">from</span> docx.shared <span class="hljs-keyword">import</span> Cm<br>section = doc.sections[<span class="hljs-number">0</span>]<br><span class="hljs-comment"># 修改页面方向为横向</span><br>section.orientation = WD_ORIENT.LANDSCAPE<br><span class="hljs-comment"># A4纸大小</span><br>section.page_width = Cm(<span class="hljs-number">29.7</span>)<br>section.page_height = Cm(<span class="hljs-number">21.0</span>)<br><span class="hljs-comment"># 页面边距设置</span><br>section.left_margin = Cm(<span class="hljs-number">2.5</span>)    <br>section.right_margin = Cm(<span class="hljs-number">2.5</span>)   <br>section.top_margin = Cm(<span class="hljs-number">3</span>)     <br>section.bottom_margin = Cm(<span class="hljs-number">3</span>)  <br></code></pre></td></tr></table></figure><h2 id="分节符"><a href="#分节符" class="headerlink" title="分节符"></a>分节符</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> docx.enum.section <span class="hljs-keyword">import</span> WD_SECTION<br><span class="hljs-comment"># 插入下一页分节符（新节从下一页开始）</span><br>doc.add_section(WD_SECTION.NEW_PAGE)<br><span class="hljs-comment"># 连续分节符会在当前位置开始新节，不强制分页</span><br>doc.add_section(WD_SECTION.CONTINUOUS)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>work</category>
      
      <category>Python第三方库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>办公自动化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo + GitHub完成个人博客部署</title>
    <link href="/2025/07/07/Hexo%20+%20GitHub%E5%AE%8C%E6%88%90%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2/"/>
    <url>/2025/07/07/Hexo%20+%20GitHub%E5%AE%8C%E6%88%90%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2/</url>
    
    <content type="html"><![CDATA[<p><code>通常在线上部署个人博客需要租借云服务器，而通过借助Node.js特性以及GitHub Page的帮助，我们利用Hexo（一个基于 Node.js 的快速、简洁且高效的静态网站生成器）完成本地博客与静态资源的映射，将项目托管给GitHub，从而省下一笔租借云服务器的费用，Hexo的丰富生态也使得博客页面有了较大的定制化空间，这是我们选择使用Hexo + GitHub搭建个人博客的重要原因！</code></p><h1 id="1-环境准备工作"><a href="#1-环境准备工作" class="headerlink" title="1. 环境准备工作"></a>1. 环境准备工作</h1><p><strong>安装nvm，node.js，git</strong></p><blockquote><p>nvm是node.js版本管理工具（可以理解为node.js版的conda）；node.js使得JavaScript可以在服务端运行而不仅仅在浏览器，使得其可以用于开发后端服务，npm是node.js的包管理工具，类似于python环境中的pip；git用于与GitHub建立连接，通过配置密钥可以省略身份验证阶段，安全性更高的同时提高效率</p></blockquote><h2 id="1-1-nvm与node-js安装"><a href="#1-1-nvm与node-js安装" class="headerlink" title="1.1 nvm与node.js安装"></a>1.1 nvm与node.js安装</h2><p>nvm安装查询相关资料进行傻瓜式安装即可，当在命令提示符输入以下命令显示版本号即安装成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nvm version<br></code></pre></td></tr></table></figure><p>node.js可通过nvm直接安装，通过<a href="https://nodejs.org/en/about/previous-releases">node.js版本</a> 查询可用版本，安装命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 安装v18的node.js</span><br>nvm install 18<br><span class="hljs-comment"># 查询nvm拥有的node.js环境</span><br>nvm list<br></code></pre></td></tr></table></figure><img src="/img/hexo/1.png" alt="image-20250623164606527" style="zoom: 50%;" /><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 启用指定版本的node.js环境</span><br>nvm use 18.20.8<br></code></pre></td></tr></table></figure><h2 id="1-2-git配置"><a href="#1-2-git配置" class="headerlink" title="1.2 git配置"></a>1.2 git配置</h2><h3 id="代理配置"><a href="#代理配置" class="headerlink" title="代理配置"></a>代理配置</h3><blockquote><p>访问GitHub时常会出现访问延时的情况，建议自己找到梯子，为git配置代理服务器</p></blockquote><p>梯子确保可用后，在系统此处可查看代理服务器地址</p><img src="/img/hexo/2.png" alt="image-20250629150439961" style="zoom: 50%;" /><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 通过如下方式配置代理服务器地址</span><br>git config --global http.proxy <span class="hljs-string">&#x27;http://代理服务器地址:端口&#x27;</span><br>git config --global https.proxy <span class="hljs-string">&#x27;https://代理服务器地址:端口&#x27;</span><br><span class="hljs-comment"># 通过如下方式查询是否配置成功</span><br>git config --global --get https.proxy<br>git config --global --get http.proxy<br></code></pre></td></tr></table></figure><h3 id="密钥配置"><a href="#密钥配置" class="headerlink" title="密钥配置"></a>密钥配置</h3><p>打开git bash并输入如下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-keygen -t rsa -C <span class="hljs-string">&quot;你的邮箱地址&quot;</span><br></code></pre></td></tr></table></figure><p>命令完成后若 <code>C:\Users\你的本机用户名\.ssh</code> 目录下拥有如下文件，说明本地私钥创建成功</p><img src="/img/hexo/3.png" alt="image-20250623165204572" style="zoom:67%;" /><p>启动 SSH 代理（ssh-agent）并将私钥添加到代理中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">eval</span> <span class="hljs-string">&quot;<span class="hljs-subst">$(ssh-agent -s)</span>&quot;</span> <br>ssh-add ~/.ssh/id_rsa<br></code></pre></td></tr></table></figure><p>查看该私钥对应的公钥（以ssh-rsa开头，以邮箱地址结尾）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查询私钥对应的公钥</span><br><span class="hljs-built_in">cat</span> ~/.ssh/id_rsa.pub<br></code></pre></td></tr></table></figure><img src="/img/hexo/4.png" alt="image-20250623165644488" style="zoom:67%;" /><p>打开GitHub进入个人Setting界面，将查询到的公钥信息复制并添加</p><img src="/img/hexo/5.png" alt="image-20250623165928605" style="zoom:50%;" /><p>使用如下命令验证该环节是否成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh -T git@github.com<br></code></pre></td></tr></table></figure><img src="/img/hexo/6.png" alt="image-20250623170124316" style="zoom:67%;" /><h2 id="1-3-Hexo基本配置"><a href="#1-3-Hexo基本配置" class="headerlink" title="1.3 Hexo基本配置"></a>1.3 Hexo基本配置</h2><p>Hexo 是一个基于 Node.js 的快速、简洁且高效的静态网站生成器。它允许你使用 Markdown 或其他标记语言编写文章，然后通过简单的命令将其转换为静态 HTML 页面，适合用于搭建博客、项目文档、个人网站等。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 直接通过npm进行安装</span><br>npm install -g hexo-cli<br><span class="hljs-comment"># 初始化Hexo 项目，自动创建一个完整的博客目录结构，并安装必要的依赖文件</span><br>hexo init<br><span class="hljs-comment"># 安装git自动部署发布hexo插件</span><br>npm install hexo-deployer-git --save<br><span class="hljs-comment"># 启动本地服务器，验证hexo是否安装成功</span><br>hexo server<br></code></pre></td></tr></table></figure><img src="/img/hexo/7.png" alt="image-20250623171307314" style="zoom:67%;" /><img src="/img/hexo/8.png" alt="image-20250623171331262" style="zoom:50%;" /><h1 id="2-利用GitHub管理"><a href="#2-利用GitHub管理" class="headerlink" title="2. 利用GitHub管理"></a>2. 利用GitHub管理</h1><h2 id="2-1-建立仓库，创建分支"><a href="#2-1-建立仓库，创建分支" class="headerlink" title="2.1 建立仓库，创建分支"></a>2.1 建立仓库，创建分支</h2><ol><li><p>进入GitHub官网，创建一个新的仓库，仓库名称为“GitHub账号名.github.io”</p><blockquote><p>名称必须符合上述规则，否则可能会出错</p></blockquote><img src="/img/hexo/9.png" alt="image-20250629204150588" style="zoom: 50%;" /><p><img src="/img/hexo/10.png" alt="image-20250629201442687"></p></li><li><p>将该项目克隆至本地（点进仓库即可看见克隆地址）</p><img src="/img/hexo/11.png" alt="image-20250629204842349" style="zoom:67%;" /><p>在自定义的路径下，使用git工具完成项目克隆，未来在此项目下完成博客编写</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> 上述地址👆<br></code></pre></td></tr></table></figure></li><li><p>创建“code”分支，用于未来管理源码（否则当本地项目丢失后无法还原博客数据）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 本地创建code分支并完成分支切换（本地默认使用main分支）</span><br>git checkout -b <span class="hljs-string">&quot;code&quot;</span><br></code></pre></td></tr></table></figure><img src="/img/hexo/12.png" alt="image-20250629203023711" style="zoom: 67%;" /><p>将本地分支推送至于远程，首次推送分支至远程需要本地内容有改动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 创建一个空文件（后续不需要可手动删除）</span><br><span class="hljs-built_in">touch</span> init.md<br><span class="hljs-comment"># 将当前目录下的文件添加进暂存区</span><br>git add .<br><span class="hljs-comment"># 将暂存区内容纳入版本库管理</span><br>git commit -m <span class="hljs-string">&quot;code分支初始化&quot;</span><br><span class="hljs-comment"># 推送新分支</span><br>git push -u origin code<br></code></pre></td></tr></table></figure><p>通过GitHub仓库验证推送是否成功</p><img src="/img/hexo/13.png" alt="image-20250629211413286" style="zoom:50%;" /></li></ol><h2 id="2-2-创建Hexo项目"><a href="#2-2-创建Hexo项目" class="headerlink" title="2.2 创建Hexo项目"></a>2.2 创建Hexo项目</h2><ol><li><p>创建一个空文件夹，执行如下命令，完成博客项目的初始化</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 初始化Hexo 项目，自动创建一个完整的博客目录结构，并安装必要的依赖文件</span><br>hexo init<br></code></pre></td></tr></table></figure></li><li><p>打开 Hexo 项目下的 <code>_config.yml</code></p><img src="/img/hexo/14.png" alt="image-20250623172228084" style="zoom:67%;" /><p>拉至文件最下方，对相关内容进行修改</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Deployment</span><br><span class="hljs-comment">## Docs: https://hexo.io/docs/one-command-deployment</span><br><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repository:</span> <span class="hljs-string">https://github.com/GitHub账号名/GitHub账号名.github.io</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">main</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="2-2-1-源码维护"><a href="#2-2-1-源码维护" class="headerlink" title="2.2.1 源码维护"></a>2.2.1 源码维护</h3><ol><li><p>将该文件夹的所有内容剪切至我们本地的仓库下</p><blockquote><p>确保此时git属于code分支（在当前目录下打开git bash，若命令行处末尾显示code即说明当前处于code分支），若处于main分支则需要切换分支后再进行剪切，后续我们使用code分支完成源码的备份，使用main分支完成项目的静态资源维护</p></blockquote><img src="/img/hexo/15.png" alt="image-20250629212144974" style="zoom:67%;" /></li><li><p>将源码进行备份至GitHub仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 将修改内容全部加入暂存区</span><br>git add .<br><span class="hljs-comment"># 将暂存区内容送入版本库</span><br>git commit -m <span class="hljs-string">&quot;博客源码备份1&quot;</span><br><span class="hljs-comment"># 推送至远程仓库</span><br>git push<br></code></pre></td></tr></table></figure><p>此时可在 code 分支看见我们推送的数据</p><img src="/img/hexo/16.png" alt="image-20250629213024701" style="zoom:67%;" /></li></ol><h3 id="2-2-1-静态资源维护"><a href="#2-2-1-静态资源维护" class="headerlink" title="2.2.1 静态资源维护"></a>2.2.1 静态资源维护</h3><ol><li><p>安装hexo-deployer-git插件</p><blockquote><p>由于该插件是安装在本地的，因此每一个全新的hexo项目都需要重新安装</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 安装git自动部署工具</span><br>npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure></li><li><p>执行Hexo自动部署的三个步骤</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 清理 Hexo 缓存</span><br>hexo clean   <br><span class="hljs-comment"># 重新生成静态文件</span><br>hexo generate  <br><span class="hljs-comment"># 完成本地项目部署至GitHub </span><br><span class="hljs-comment">#（由于在_config.yml中配置过，因此生成的静态资源会发布至main分支）</span><br>hexo deploy    <br></code></pre></td></tr></table></figure></li><li><p>此时可在main分支查看部署的具体资源情况</p><img src="/img/hexo/17.png" alt="image-20250629215128189" style="zoom:67%;" /><p>此时可以通过网址访问初始页面</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">https://你的GitHub账户名.github.io/<br></code></pre></td></tr></table></figure><img src="/img/hexo/18.png" alt="image-20250629215424932" style="zoom: 50%;" /></li></ol><h2 id="2-3-后续维护"><a href="#2-3-后续维护" class="headerlink" title="2.3 后续维护"></a>2.3 后续维护</h2><p>总体而言，我们利用code分支管理项目源码，利用main分支管理静态页面。</p><p>每次项目中的数据更新后，我们需要使用add，commit，push命令同步至code分支上。</p><p>利用hexo clean,hexo generate，hexo deploy命令完成静态项目的构建与自动部署，此部分内容会被同步至main分支上。</p><h2 id="2-4-绑定个人域名（非必须）"><a href="#2-4-绑定个人域名（非必须）" class="headerlink" title="2.4 绑定个人域名（非必须）"></a>2.4 绑定个人域名（非必须）</h2><blockquote><p>如果不希望自己的GitHub账号暴露在网址中，可以考虑申请租借域名，<a href="https://buy.cloud.tencent.com/domain/price?type=overview">腾讯云</a>阿里云等平台都提供了此项服务</p></blockquote><h3 id="2-4-1-个人域名申请"><a href="#2-4-1-个人域名申请" class="headerlink" title="2.4.1 个人域名申请"></a>2.4.1 个人域名申请</h3><p>从经济实惠的角度考虑，选择.top后缀的域名即可，域名申请需要实名认证，可能需要半天左右的时间，具体的不再赘述，只需跟着系统指引即可</p><img src="/img/hexo/19.png" alt="image-20250630204211025" style="zoom:67%;" /><p>完成域名申请后，可在个人主页查询域名的具体情况，如下👇</p><img src="/img/hexo/20.png" alt="image-20250630204451421" style="zoom:50%;" /><h3 id="2-4-2-绑定GitHub-Page"><a href="#2-4-2-绑定GitHub-Page" class="headerlink" title="2.4.2 绑定GitHub Page"></a>2.4.2 绑定GitHub Page</h3><ol><li><p>在博客项目的source文件夹下下创建“CNAME”文件，内容填写为自己的域名（如上即xxx.top，不要包含https，www以及斜杠部分）</p><img src="/img/hexo/21.png" alt="image-20250702094707036" style="zoom: 67%;" /><p>使用add，commit，push老三样将新添的内容推送至code分支</p><img src="/img/hexo/22.png" alt="image-20250630205441059" style="zoom:67%;" /></li><li><p>进入腾讯云的域名管理界面，点击需要目标域名的“解析”</p><img src="/img/hexo/23.png" alt="image-20250701194319708" style="zoom:67%;" /><p>点击“新手快速解析”</p><img src="/img/hexo/24.png" alt="image-20250701194454790" style="zoom: 50%;" /><p>填写自己GitHub仓库的访问地址</p><img src="/img/hexo/25.png" alt="image-20250701194713777" style="zoom: 50%;" /><p>完成后可看到如下两条记录，对腾讯云的操作到此结束</p><img src="/img/hexo/26.png" alt="image-20250701194856377" style="zoom:50%;" /></li><li><p>进入GitHub仓库对应的Settings部分，选择Page选项，并将自己的域名填入保存</p><img src="/img/hexo/27.png" alt="image-20250630205714086" style="zoom:67%;" /><p>当出现如下标志时，说明域名与该项目成功绑定</p><img src="/img/hexo/28.png" alt="image-20250701195148565" style="zoom:67%;" /></li><li><p>使用绑定的域名进行访问，成功跳转至我们自己的项目</p><img src="/img/hexo/29.png" alt="image-20250701195253497" style="zoom:67%;" /></li></ol><h1 id="3-从使用的角度出发认识Hexo"><a href="#3-从使用的角度出发认识Hexo" class="headerlink" title="3. 从使用的角度出发认识Hexo"></a>3. 从使用的角度出发认识Hexo</h1><p>在Hexo生成的初始项目下，我们着重关注如下内容👇</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">.<br>├── _config.yml <span class="hljs-comment"># 网站的配置文件，您可以在此配置大部分的参数。</span><br>├── scaffolds<span class="hljs-comment"># 模版文件夹，当新建文章时，Hexo会根据scaffold存储模板来创建文件。</span><br>├── <span class="hljs-built_in">source</span><span class="hljs-comment"># 资源文件夹，用于存放用户资源</span><br>|   ├── _drafts<span class="hljs-comment"># 草稿文件，自动部署时此部分不会生成静态资源</span><br>|   └── _posts<span class="hljs-comment"># 文章文件</span><br></code></pre></td></tr></table></figure><p>本节将对各部分作用进行解释，并展示常见的用法（更加详细的内容请看<a href="https://hexo.fluid-dev.com/docs/guide/">Hexo Fluid官方文档</a>），最后为项目换上较为流行的 Fluid 主题</p><h2 id="3-1-config-yml"><a href="#3-1-config-yml" class="headerlink" title="3.1 _config.yml"></a>3.1 _config.yml</h2><p>该文件主要针对网页全体对象进行配置，如下👇</p><table><thead><tr><th align="left">设置</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>title</code></td><td align="left">网站标题（不同主题显示位置不一致）</td></tr><tr><td align="left"><code>subtitle</code></td><td align="left">网站副标题（不同主题显示位置不一致）</td></tr></tbody></table><img src="/img/hexo/30.png" alt="image-20250702095654608" style="zoom:67%;" /><table><thead><tr><th align="left">设置</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>description</code></td><td align="left">网站描述（在搜索引擎搜索出来后展示的简短描述）<br /><img src="/img/hexo/31.png" alt="image-20250702100455980" style="zoom: 50%;" /></td></tr><tr><td align="left"><code>keywords</code></td><td align="left">网站的关键词，支持多个关键词【Yml列表】（一些主题可以用于站内搜索）</td></tr><tr><td align="left"><code>author</code></td><td align="left">作者名称（网页左下角）<br /><img src="/img/hexo/32.png" alt="image-20250702100654273" style="zoom: 50%;" /></td></tr><tr><td align="left"><code>language</code></td><td align="left">网站使用的语言，默认为 <code>en</code>（即英文），中文简体为<code>zh-CN</code></td></tr><tr><td align="left"><code>timezone</code></td><td align="left">网站时区， 电脑对应时区，对于中国大陆地区可以使用 <code>Asia/Shanghai</code></td></tr><tr><td align="left"><code>permalink</code></td><td align="left">文章的<a href="https://hexo.io/zh-cn/docs/permalinks">永久链接</a>格式，设置为<code>blog/:categoty/:title/</code>即文章生成的静态页面放在<code>blog/分类名/文章名</code>目录下</td></tr><tr><td align="left"><code>permalink_defaults</code></td><td align="left">永久链接中各部分的默认值</td></tr><tr><td align="left"><code>url</code></td><td align="left">网站的根目录，如<code>https://xxx.github.io</code></td></tr><tr><td align="left"><code>baseurl</code></td><td align="left">生成的页面中，所有相对路径（如 CSS、JS、图片）会基于<code>url</code>拼接<code>baserul</code>，因此当<code>baseurl</code>为<code>/</code>时，所有资源基于<code>https://xxx.github.io/</code>进行定位</td></tr><tr><td align="left"><code>theme</code></td><td align="left">主题设定，如后续切换为<code>fluid</code>主题则此处内容为<code>fluid</code>，关于主题更多的操作在后续更换主题时详细介绍</td></tr></tbody></table><p>上述即为常用配置，需要完成更高等级的定制化请参考官方文档。</p><p>由于分类页面与标签页面默认不支持分页，因此建议再加入如下配置，使得其拥有分页功能</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">tag_generator:</span><br>  <span class="hljs-attr">per_page:</span> <span class="hljs-number">10</span>          <span class="hljs-comment"># 标签页分页设置（关键配置）</span><br>  <span class="hljs-attr">order_by:</span> <span class="hljs-string">-date</span>       <span class="hljs-comment"># 按日期降序排列</span><br><span class="hljs-attr">category_generator:</span><br>  <span class="hljs-attr">per_page:</span> <span class="hljs-number">10</span>          <span class="hljs-comment"># 分类页单独设置分页数量</span><br>  <span class="hljs-attr">order_by:</span> <span class="hljs-string">-date</span>       <span class="hljs-comment"># 按日期降序排列</span><br></code></pre></td></tr></table></figure><h2 id="3-2-scaffolds文件夹"><a href="#3-2-scaffolds文件夹" class="headerlink" title="3.2 scaffolds文件夹"></a>3.2 scaffolds文件夹</h2><p>初始情况下，Hexo为我们提供了三种模板</p><img src="/img/hexo/33.png" alt="image-20250707203104866" style="zoom:50%;" /><p>当创建一篇新文章时，我们需要用如下命令，这样创建出的文章会按照目录结构存放</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 其中layout取值即文件夹中的模板名称（draft，page，post）</span><br><span class="hljs-comment"># 根据需要选取即可，默认选取post（可通过config文件进行修改）</span><br>hexo new [layout] &lt;title&gt;<br></code></pre></td></tr></table></figure><p><code>post.md文</code>件内部格式如下，即用该模板创建的文章会显式记录当前的标题以及文件创建日期，标签为空，后续可自由更改</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs markdown">---<br>title: &#123;&#123; title &#125;&#125;<br>date: &#123;&#123; date &#125;&#125;<br><span class="hljs-section">tags:</span><br><span class="hljs-section">---</span><br><br></code></pre></td></tr></table></figure><p>创建后的文件存放在<code>source</code>文件夹的<code>_post</code>目录下</p><img src="/img/hexo/34.png" alt="image-20250707204427194" style="zoom:67%;" /><p>创建出的初始内容如下，<code>title</code>部分为传入参数，日期为创建时的日期。这部分信息在<code>Hexo</code>中称为<a href="https://hexo.io/zh-cn/docs/front-matter">Front-matter</a>，更多参数详情请见官方文档，此处仅介绍用法</p><img src="/img/hexo/35.png" alt="image-20250707204704275" style="zoom:67%;" /><p>当需要为文章划定分类或者添加标签时，在<code>Front-matter</code>中使用<code>tags</code>或<code>categories</code>关键字进行标签或者分类管理</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 说明当前文章有[日常,美食]两种标签，标签之间层次相同，因此顺序不重要</span><br><span class="hljs-comment"># 在URL上为：xxx/blog/tags/日常/post-title</span><br><span class="hljs-attr">tags:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">日常</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">美食</span><br></code></pre></td></tr></table></figure><p>而分类之间根据写法的不同会有不同的层次关系</p><p><strong>写法一</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 此时Tennis与Baseball属于同一层级，当前文章同时隶属于这两个分类</span><br><span class="hljs-comment"># 在URL上为：xxx/categories/Tennis/post-title</span><br><span class="hljs-attr">categories:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">Tennis</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">Baseball</span><br></code></pre></td></tr></table></figure><p><strong>写法二</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 这种写法说明Baseball是Baseball是Sports的子类</span><br><span class="hljs-comment"># 在URL上为：xxx/categories/Sports/Baseball/post-title</span><br><span class="hljs-attr">categories:</span><br>  <span class="hljs-bullet">-</span> [<span class="hljs-string">Sports</span>,<span class="hljs-string">Baseball</span>]<br></code></pre></td></tr></table></figure><p><code>个人认为最开始每篇文章的categories控制在一个即可，否则模糊了标签与分类的界限，后续熟悉了或者感觉确实有需要再进行操作。</code></p><h2 id="3-3-source文件夹"><a href="#3-3-source文件夹" class="headerlink" title="3.3 source文件夹"></a>3.3 source文件夹</h2><blockquote><p>使用Typora作为Markdown编辑器即可，面对初始化主题或许有些不适配，但是当后续换成第三方提供的主题，如Fluid时，几乎完美适配，唯一的区别就是在文章顶部需要保留<code>Front-matter</code>的内容用于指定文章的标题，标签，分类等信息</p><p>此外关于图片信息，如果有条件的话建议利用PicGo将其存储到云空间，这样可以使得项目更为轻量级，具体可以参考<a href="https://blog.csdn.net/xk1835217729/article/details/123958269">Typora+PicGo+腾讯云COS搭建图床</a></p></blockquote><ul><li><p><code>_post</code>目录下存放的为使用<code>hexo new post xxx</code>创建的文章</p></li><li><p><code>_drafts</code>目录下存放的为使用<code>hexo new draft xxx</code>创建的草稿文章</p></li><li><p><code>yourname</code>目录下存放的为使用<code>hexo new page yourname</code>创建的文章</p><blockquote><p>这部分创建的文件夹为自定义的<code>yourname</code>，文章名为<code>index.md</code>，不在博客正文中出现，但是可能在博客的“关于”界面需要使用，如后续部署的fluid主题就需要使用<code>hexo new page about</code>生成一个页面单独显示，具体在后续布置主题时介绍</p></blockquote></li></ul><h2 id="3-4-Fluid主题安装"><a href="#3-4-Fluid主题安装" class="headerlink" title="3.4 Fluid主题安装"></a>3.4 Fluid主题安装</h2><blockquote><p>Hexo原生主题十分老久，市面上存在大量开源主题，<a href="https://butterfly.js.org/">Butterfly</a>，<a href="https://theme-next.js.org/">NextX</a>，<a href="https://hexo.fluid-dev.com/">Fluid</a>等，更多的主题可以参考官方文档或者直接咨询大模型，挑选自己喜爱的一款即可</p></blockquote><p>各主题的迁移大同小异，此处以<code>Fluid</code>为例</p><ol><li><p>在博客目录下打开命令行，利用<code>npm</code>安装<code>fluid</code>主题</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install --save hexo-theme-fluid<br></code></pre></td></tr></table></figure><p>在<code>node_modules</code>文件夹下看见<code>hexo-theme-fluid</code>即安装成功</p><img src="/img/hexo/36.png" alt="image-20250707223123613" style="zoom:67%;" /></li><li><p>进入<code>hexo-theme-fluid</code>文件夹，复制其<code>_config.yml</code>配置文件并将其重命名为<code>_config.fluid.yml</code>，移动至项目根目录</p><img src="/img/hexo/37.png" alt="image-20250707223340557" style="zoom:50%;" /></li><li><p>打开<code>_config.yml</code>进行配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 将主题进行修改</span><br><span class="hljs-attr">theme:</span> <span class="hljs-string">fluid</span><br></code></pre></td></tr></table></figure><p>此时在本地使用命令<code>hexo server</code>后已能顺利访问到修改后的主题</p><img src="/img/hexo/38.png" alt="image-20250707223646403" style="zoom:50%;" /></li><li><p>创建“关于”界面</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 首次应用主题需要手动进行创建，否则该连接无内容</span><br>hexo new page <span class="hljs-string">&quot;关于本站&quot;</span><br></code></pre></td></tr></table></figure><img src="/img/hexo/39.png" alt="image-20250707230420537" style="zoom:50%;" /></li></ol><h2 id="3-5-更多定制化服务"><a href="#3-5-更多定制化服务" class="headerlink" title="3.5 更多定制化服务"></a>3.5 更多定制化服务</h2><p>一些细节的设置通过操作<code>_config.fluid.yml</code>与<code>_config.yml</code>实现，前者优先级更高，且配置文件内部几乎都有比较详尽的中文注释，根据需要进行修改即可，或参考<a href="https://hexo.fluid-dev.com/docs/guide/">Hexo Fluid配置指南</a></p><p>例如需要修改背景图片，则定位至<code>node_modules\hexo-theme-fluid\source\img</code>路径下添加自己的图片并修改配置文件路径即可，此外还有诸多插件可以用于丰富主题内容，如背景音乐等，具体的情况可在网上查询相关资料进行添加。</p><img src="/img/hexo/40.png" alt="image-20250708102053016" style="zoom:67%;" /><img src="/img/hexo/41.png" alt="image-20250708102013453" style="zoom: 67%;" /><p>关于背景图片固定，毛玻璃背景特效等可参考👉<a href="https://4rozen.github.io/archives/Hexo/60191.html">Hexo fluid 全屏背景图随日夜模式切换以及正文底页毛玻璃效果</a></p>]]></content>
    
    
    <categories>
      
      <category>work</category>
      
      <category>环境部署</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客搭建</tag>
      
      <tag>域名申请</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
